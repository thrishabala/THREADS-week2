import java.util.LinkedList;
import java.util.Queue;

public class ProducerConsumer {

    static class DataQueue {
        private Queue<Integer> queue = new LinkedList<>();
        private final int LIMIT = 10;

        public synchronized void produce(int data) throws InterruptedException {
            while (queue.size() == LIMIT) {
                wait();
            }
            queue.add(data);
            System.out.println("Produced: " + data);
            notifyAll();
        }

        public synchronized int consume() throws InterruptedException {
            while (queue.isEmpty()) {
                wait();
            }
            int data = queue.poll();
            System.out.println("Consumed: " + data);
            notifyAll();
            return data;
        }
    }

    static class Producer extends Thread {
        private DataQueue dataQueue;

        public Producer(DataQueue dataQueue) {
            this.dataQueue = dataQueue;
        }

        @Override
        public void run() {
            for (int i = 0; i < 20; i++) {
                try {
                    dataQueue.produce(i);
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    static class Consumer extends Thread {
        private DataQueue dataQueue;

        public Consumer(DataQueue dataQueue) {
            this.dataQueue = dataQueue;
        }

        @Override
        public void run() {
            for (int i = 0; i < 20; i++) {
                try {
                    dataQueue.consume();
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        DataQueue dataQueue = new DataQueue();

        Producer producer1 = new Producer(dataQueue);
        Producer producer2 = new Producer(dataQueue);
        Consumer consumer1 = new Consumer(dataQueue);
        Consumer consumer2 = new Consumer(dataQueue);

        producer1.start();
        producer2.start();
        consumer1.start();
        consumer2.start();

        try {
            producer1.join();
            producer2.join();
            consumer1.join();
            consumer2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
